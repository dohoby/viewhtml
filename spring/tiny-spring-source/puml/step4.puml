@startuml

class BeanDefinition {
Object bean
Class  beanClass
String beanClassName
PropertyValues propertyValues
getBean(String name)
void setBean(Object bean)
void setBeanClassName(String beanClassName)
void setPropertyValues(PropertyValues propertyValues)
}

'-----------------------------------------------------------------------

interface BeanFactory {
getBean(String name)
registryBeanDefinition(String name,BeanDefinition beanDefinition);
}

abstract class AbstractBeanFactory{
Map<String,BeanDefinition> concurrentHashMap
getBean(String name)
registryBeanDefinition(String name,BeanDefinition beanDefinition)
abstract Object doCreateBean(BeanDefinition beanDefinition);

}

BeanFactory <|.. AbstractBeanFactory
'-----------------------------------------------------------------------


class AutowireCapableBeanFactory{
Object doCreateBean(BeanDefinition beanDefinition);
createBeanInstance(BeanDefinition beanDefinition)
applyPropertyValues(Bean bean,BeanDefinition beanDefinition)
}

AbstractBeanFactory <|-- AutowireCapableBeanFactory

note bottom
createBeanInstance:
Object bean = beanDefinition.getBeanClass().newInstance();

applyPropertyValues:
protected void applyPropertyValues(Object bean, BeanDefinition mbd) throws Exception {
		for (PropertyValue propertyValue : mbd.getPropertyValues().getPropertyValues()) {
			Field declaredField = bean.getClass().getDeclaredField(propertyValue.getName());
			declaredField.setAccessible(true);
			declaredField.set(bean, propertyValue.getValue());
		}
	}
end note

'-----------------------------------------------------------------------
class PropertyValues{
List<PropertyValue> propertyValueArrayList
}

class PropertyValue{
String name
Object value
}


PropertyValues *--> PropertyValue
BeanDefinition o--> PropertyValues
AbstractBeanFactory *--> BeanDefinition

'-----------------------------------------------------------------------

interface BeanDefinitionReader{
void loadBeanDefinitions(String location)
}

class AbstractBeanDefinitionReader{
Map<String,BeanDefinition> registry
ResourceLoader resourceLoader
protected AbstractBeanDefinitionReader(ResourceLoader resourceLoader)
}

AbstractBeanDefinitionReader *--> BeanDefinition
BeanDefinitionReader <|.. AbstractBeanDefinitionReader

'-----------------------------------------------------------------------


class XmlBeanDefinitionReader{
void loadBeanDefinitions(String location)
protected void doLoadBeanDefinitions(InputStream inputStream)
}

AbstractBeanDefinitionReader <|-- XmlBeanDefinitionReader


'-----------------------------------------------------------------------


class ResourceLoader{
void getResource(String location)
}

note bottom
    public Resource getResource(String location){
        URL resource = this.getClass().getClassLoader().getResource(location);
        return new UrlResource(resource);
    }
end note

interface Resource{
    InputStream getInputStream() throws IOException;
}


class UrlResource{
    private final URL url;
    UrlResource(URL url)
    void getInputStream()
}

Resource <|.. UrlResource
ResourceLoader --> UrlResource
AbstractBeanDefinitionReader *--> ResourceLoader


@enduml