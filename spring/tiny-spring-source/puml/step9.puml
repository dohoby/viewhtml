@startuml

interface InvocationHandler {
public Object invoke(Object proxy, Method method, Object[] args)
}

interface AopProxy {
Object getProxy()
}
'-----------------------------------------------------------------------
class JdkDanamicAopProxy{
AdvisedSupport advised;
public Object getProxy()
public Object invoke(final Object proxy, final Method method, final Object[] args)
}

note left
   @Override
	public Object getProxy() {
		return Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] { advised.getTargetSource()
				.getTargetClass() }, this);
	}

	@Override
	public Object invoke(final Object proxy, final Method method, final Object[] args) throws Throwable {
		MethodInterceptor methodInterceptor = advised.getMethodInterceptor();
		if (advised.getMethodMatcher() != null
				&& advised.getMethodMatcher().matches(method, advised.getTargetSource().getTarget().getClass())) {
			return methodInterceptor.invoke(new ReflectiveMethodInvocation(advised.getTargetSource().getTarget(),
					method, args));
		} else {
			return method.invoke(advised.getTargetSource().getTarget(), args);
		}
	}
end note

AopProxy <|.. JdkDanamicAopProxy
InvocationHandler <|.. JdkDanamicAopProxy
JdkDanamicAopProxy *-->AdvisedSupport
JdkDanamicAopProxy --> ReflectiveMethodInvocation


'-----------------------------------------------------------------------
class AdvisedSupport{
MethodInterceptor methodIntecepter;
TargetSource targetSource;
private MethodMatcher methodMatcher;
}
AdvisedSupport *-->MethodInterceptor
AdvisedSupport *-->MethodMatcher


'-----------------------------------------------------------------------
class TargetSource {
Class targetClass;
Object target;
}
AdvisedSupport *-->TargetSource

'-----------------------------------------------------------------------
interface MethodInterceptor{
Object invoke(MethodInvocation invocation)
}
MethodInterceptor --> MethodInvacation

interface Interceptor{
}
Interceptor <|-- MethodInterceptor
Advice <|-- Interceptor


'-----------------------------------------------------------------------


class ReflectiveMethodInvocation {
Object target;
Method method;
Object[] args;
public Object proceed()
public AccessibleObject getStaticPart()
public Object[] getArguments()
public Method getMethod()
}
note bottom
	@Override
	public Object proceed() throws Throwable {
		return method.invoke(target, args);
	}
end note
MethodInvacation <|.. ReflectiveMethodInvocation

'-----------------------------------------------------------------------
interface Joinpoint{
 Object proceed() throws Throwable;
 Object getThis();
 AccessibleObject getStaticPart();
}

interface Invocation{
 Object[] getArguments();
}

interface MethodInvacation{
Method getMethod();
}

Invocation <|--MethodInvacation
Joinpoint <|--Invocation



'-----------------------------------------------------------------------
class TimerInterceptor{
public Object invoke(MethodInvocation invocation)
}
MethodInterceptor <|--TimerInterceptor



'-----------------------------------------------------------------------
interface PointcutAdvisor{
  Pointcut getPointcut();
}

Advisor <|--PointcutAdvisor
PointcutAdvisor -->Pointcut

'-----------------------------------------------------------------------
interface Advice{
}

'-----------------------------------------------------------------------

interface Advisor{
  Advice getAdvice();
}
Advice <--Advisor

'-----------------------------------------------------------------------
interface Pointcut{
  ClassFilter getClassFilter();
  MethodMatcher getMethodMatcher();
}

Pointcut -->MethodMatcher
Pointcut -->ClassFilter

'-----------------------------------------------------------------------
interface ClassFilter{
 boolean matches(Class targetClass);
}

'-----------------------------------------------------------------------
interface MethodMatcher{
boolean matches(Method method, Class targetClass);
}


'-----------------------------------------------------------------------
class AspectJExpressionPointcut{
    private PointcutParser pointcutParser;
	private String expression;
	private PointcutExpression pointcutExpression;
	public boolean matches(Class targetClass)
	public boolean matches(Method method, Class targetClass)
}


Pointcut <|.. AspectJExpressionPointcut
ClassFilter <|.. AspectJExpressionPointcut
MethodMatcher <|.. AspectJExpressionPointcut

'-----------------------------------------------------------------------
class AspectJExpressionPointcutAdvisor{
    private AspectJExpressionPointcut pointcut = new AspectJExpressionPointcut();
    private Advice advice;
}

PointcutAdvisor <|.. AspectJExpressionPointcutAdvisor
AspectJExpressionPointcutAdvisor *-->AspectJExpressionPointcut
AspectJExpressionPointcutAdvisor *-->Advice



'-----------------------------------------------------------------------
class AspectJAwareAdvisorAutoProxyCreator{
AbstractBeanFactory beanFactory;
}
note top
	@Override
	public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception {
		if (bean instanceof AspectJExpressionPointcutAdvisor) {
			return bean;
		}
        if (bean instanceof MethodInterceptor) {
            return bean;
        }
		List<AspectJExpressionPointcutAdvisor> advisors = beanFactory
				.getBeansForType(AspectJExpressionPointcutAdvisor.class);
		for (AspectJExpressionPointcutAdvisor advisor : advisors) {
			if (advisor.getPointcut().getClassFilter().matches(bean.getClass())) {
				AdvisedSupport advisedSupport = new AdvisedSupport();
				advisedSupport.setMethodInterceptor((MethodInterceptor) advisor.getAdvice());
				advisedSupport.setMethodMatcher(advisor.getPointcut().getMethodMatcher());

				TargetSource targetSource = new TargetSource(bean, bean.getClass().getInterfaces());
				advisedSupport.setTargetSource(targetSource);

				return new JdkDynamicAopProxy(advisedSupport).getProxy();
			}
		}
		return bean;
	}
end note

AspectJAwareAdvisorAutoProxyCreator --> AspectJExpressionPointcutAdvisor
AspectJAwareAdvisorAutoProxyCreator *--> AbstractBeanFactory



'-----------------------------------------------------------------------
Abstract class AbstractBeanFactory{
	public List getBeansForType(Class type) throws Exception {
}

'-----------------------------------------------------------------------
interface BeanPostProcessor{
	Object postProcessBeforeInitialization(Object bean, String beanName) throws Exception;
	Object postProcessAfterInitialization(Object bean, String beanName) throws Exception;
}
BeanPostProcessor <|..AspectJAwareAdvisorAutoProxyCreator

'-----------------------------------------------------------------------
interface BeanFactoryAware {
    void setBeanFactory(BeanFactory beanFactory) throws Exception;
}
BeanFactoryAware <|..AspectJAwareAdvisorAutoProxyCreator


'-----------------------------------------------------------------------
class BeanInitializeLogger{
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws Exception {
	public Object postProcessAfterInitialization(Object bean, String beanName) throws Exception {
}
BeanPostProcessor <|.. BeanInitializeLogger

'-----------------------------------------------------------------------


'-----------------------------------------------------------------------
/'
注释
'/
@enduml